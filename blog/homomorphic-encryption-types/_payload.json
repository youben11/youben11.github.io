[{"data":1,"prerenderedAt":199},["Reactive",2],{"content-query-QSadAJegMA":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"date":10,"image":11,"draft":6,"body":12,"_type":194,"_id":195,"_source":196,"_file":197,"_extension":198},"/blog/homomorphic-encryption-types","blog",false,"","Homomorphic Encryption Types","A previous post introduced homomorphic encryption (HE) and the challenges of applying it to deep learning. This post will dig into the three main types of HE schemes. We will first introduce the notion of a circuit, so that we can describe the properties of each type and differentiate between them.","2020-02-15T00:00:00.000Z","/img/he-2.jpg",{"type":13,"children":14,"toc":188},"root",[15,32,39,102,111,123,129,134,141,146,152,157,163,177,183],{"type":16,"tag":17,"props":18,"children":19},"element","p",{},[20,23,30],{"type":21,"value":22},"text","A ",{"type":16,"tag":24,"props":25,"children":27},"a",{"href":26},"/blog/introduction-to-homomorphic-encryption/",[28],{"type":21,"value":29},"previous post",{"type":21,"value":31}," introduced homomorphic encryption (HE) and the challenges of applying it to deep learning. This post will dig into the three main types of HE schemes. We will first introduce the notion of a circuit, so that we can describe the properties of each type and differentiate between them. If you are wondering what each type allows you to do, then this post is for you.",{"type":16,"tag":33,"props":34,"children":36},"h2",{"id":35},"circuits",[37],{"type":21,"value":38},"Circuits",{"type":16,"tag":17,"props":40,"children":41},{},[42,44,51,53,59,61,67,69,75,77,83,85,90,92,100],{"type":21,"value":43},"Say we have a function ",{"type":16,"tag":45,"props":46,"children":48},"code",{"className":47},[],[49],{"type":21,"value":50},"F",{"type":21,"value":52}," that takes two input values ",{"type":16,"tag":45,"props":54,"children":56},{"className":55},[],[57],{"type":21,"value":58},"x",{"type":21,"value":60}," and ",{"type":16,"tag":45,"props":62,"children":64},{"className":63},[],[65],{"type":21,"value":66},"y",{"type":21,"value":68}," and computes ",{"type":16,"tag":45,"props":70,"children":72},{"className":71},[],[73],{"type":21,"value":74},"x + x.y",{"type":21,"value":76},", a mathematical representation of this function is written as ",{"type":16,"tag":45,"props":78,"children":80},{"className":79},[],[81],{"type":21,"value":82},"F(x, y) = x + x.y",{"type":21,"value":84},", but we can also represent ",{"type":16,"tag":45,"props":86,"children":88},{"className":87},[],[89],{"type":21,"value":50},{"type":21,"value":91}," as a ",{"type":16,"tag":24,"props":93,"children":97},{"href":94,"rel":95},"https://en.wikipedia.org/wiki/Directed_acyclic_graph",[96],"nofollow",[98],{"type":21,"value":99},"directed acyclic graph",{"type":21,"value":101}," as shown in the figure below.",{"type":16,"tag":17,"props":103,"children":104},{},[105],{"type":16,"tag":106,"props":107,"children":110},"img",{"alt":108,"src":109},"he types circuit","/img/he-types-circuit.png",[],{"type":16,"tag":17,"props":112,"children":113},{},[114,116,121],{"type":21,"value":115},"A circuit is a directed acyclic graph, which has a set of inputs, gates (e.g. addition or multiplication), edges that connect inputs and edges together, and a final output. Circuits have two properties of interest, namely, size and depth. The size is the number of gates a circuit has. The depth is the biggest distance between every possible input and the output. In the figure above, the circuit has a size of two as it has two gates, and a depth of two as the longest path is between ",{"type":16,"tag":45,"props":117,"children":119},{"className":118},[],[120],{"type":21,"value":66},{"type":21,"value":122}," and the final output, and it has two gates along the way.",{"type":16,"tag":33,"props":124,"children":126},{"id":125},"types-of-homomorphic-encryption-schemes",[127],{"type":21,"value":128},"Types of Homomorphic Encryption Schemes",{"type":16,"tag":17,"props":130,"children":131},{},[132],{"type":21,"value":133},"HE schemes are classified depending on the possible circuits they can evaluate on encrypted data, differences lies in the available gates to use, and the depth of those circuits. Next we discuss the three types of HE schemes, namely, partially, somewhat and fully homomorphic encryption.",{"type":16,"tag":135,"props":136,"children":138},"h4",{"id":137},"partially-homomorphic-encryption-phe",[139],{"type":21,"value":140},"Partially Homomorphic Encryption (PHE)",{"type":16,"tag":17,"props":142,"children":143},{},[144],{"type":21,"value":145},"This type of scheme can evaluate any circuit composed of a single type of gate, addition or multiplication, but never both. It doesn't restrict neither the size nor the depth of the circuit. This type is well suited for applications that only need to perform either addition or multiplication on encrypted data. The RSA cryptosystem is an example of a PHE that allow an unbounded number of modular multiplications.",{"type":16,"tag":135,"props":147,"children":149},{"id":148},"somewhat-homomorphic-encryption-she",[150],{"type":21,"value":151},"Somewhat Homomorphic Encryption (SHE)",{"type":16,"tag":17,"props":153,"children":154},{},[155],{"type":21,"value":156},"This type of scheme can evaluate circuit composed of both addition and multiplication gates, but with a restriction on the depth (e.g. circuits with a depth of at most 5). What we call Leveled Homomorphic Encryption is a subset of SHE, it can evaluate circuits with variable depth, but the depth must be set prior to encryption, so you must set your scheme's parameters depending on the circuits you are aiming to evaluate. SHE is useful for evaluating low degree polynomials up to some level. However, we sometimes need to evaluate circuits of arbitrary depth.",{"type":16,"tag":135,"props":158,"children":160},{"id":159},"fully-homomorphic-encryption-fhe",[161],{"type":21,"value":162},"Fully Homomorphic Encryption (FHE)",{"type":16,"tag":17,"props":164,"children":165},{},[166,168,175],{"type":21,"value":167},"FHE schemes can evaluate circuits composed of both addition and multiplication gate, but in contrast to SHE, FHE has an unlimited circuit depth, which makes it suitable for deep learning applications. Although many FHE schemes have been proposed during the last decade, it has been difficult to use them in practice. Actually, FHE are now built on top of SHE. Thanks to Craig Gentry, who showed in his ",{"type":16,"tag":24,"props":169,"children":172},{"href":170,"rel":171},"https://www.cs.cmu.edu/~odonnell/hits09/gentry-homomorphic-encryption.pdf",[96],[173],{"type":21,"value":174},"paper",{"type":21,"value":176}," how we can build FHE out of SHE by using what he called bootstrapping.",{"type":16,"tag":33,"props":178,"children":180},{"id":179},"conclusion",[181],{"type":21,"value":182},"Conclusion",{"type":16,"tag":17,"props":184,"children":185},{},[186],{"type":21,"value":187},"Here we compared schemes based on the possible circuits they can evaluate, and FHE is the most powerful type based on this, however, to put such scheme into practice, someone need to consider other factors as well, we can mention the cost of evaluation, the size of ciphertexts, the domain of plaintexts (integers or real numbers), and the cost of bootstrapping for FHE schemes.",{"title":7,"searchDepth":189,"depth":189,"links":190},2,[191,192,193],{"id":35,"depth":189,"text":38},{"id":125,"depth":189,"text":128},{"id":179,"depth":189,"text":182},"markdown","content:blog:homomorphic-encryption-types.md","content","blog/homomorphic-encryption-types.md","md",1717959667491]