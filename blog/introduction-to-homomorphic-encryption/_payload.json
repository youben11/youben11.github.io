[{"data":1,"prerenderedAt":419},["Reactive",2],{"content-query-N4RvWPKiP0":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"date":10,"image":11,"draft":6,"body":12,"_type":414,"_id":415,"_source":416,"_file":417,"_extension":418},"/blog/introduction-to-homomorphic-encryption","blog",false,"","Introduction to Homomorphic Encryption","This is the first of a series of blog posts about the use of homomorphic encryption for deep learning. Here I introduce the basics and terminology as well as link to external resources that might help with a deeper understanding of the topic.","2020-01-02T00:00:00.000Z","/img/he-1.jpg",{"type":13,"children":14,"toc":403},"root",[15,23,30,114,120,142,151,156,162,167,175,180,203,209,214,250,263,269,290,296,318,341,353,359,364,370],{"type":16,"tag":17,"props":18,"children":19},"element","p",{},[20],{"type":21,"value":22},"text","This is the first of a series of blog posts about the use of homomorphic encryption for deep learning. Here I introduce the basics and terminology as well as link to external resources that might help with a deeper understanding of the topic. I also wrap-up with challenges of applying HE to DL that I should discuss in later blog posts.",{"type":16,"tag":24,"props":25,"children":27},"h2",{"id":26},"introduction",[28],{"type":21,"value":29},"Introduction",{"type":16,"tag":17,"props":31,"children":32},{},[33,35,44,46,53,55,62,63,70,71,78,79,86,87,94,96,103,105,112],{"type":21,"value":34},"A breakthrough in the history of cryptography was the ",{"type":16,"tag":36,"props":37,"children":41},"a",{"href":38,"rel":39},"https://www.cs.cmu.edu/~odonnell/hits09/gentry-homomorphic-encryption.pdf",[40],"nofollow",[42],{"type":21,"value":43},"introduction of the first fully homomorphic scheme",{"type":21,"value":45}," by Craig Gentry in 2009, however, the scheme wasn't practical at that time, so many researchers and engineers were putting efforts to making such scheme practical in industries where privacy is a big concern. Since then many researches have been done to improve performance, ",{"type":16,"tag":36,"props":47,"children":50},{"href":48,"rel":49},"https://www.microsoft.com/en-us/research/project/microsoft-seal/",[40],[51],{"type":21,"value":52},"many",{"type":21,"value":54}," ",{"type":16,"tag":36,"props":56,"children":59},{"href":57,"rel":58},"https://github.com/snucrypto/HEAAN",[40],[60],{"type":21,"value":61},"open source",{"type":21,"value":54},{"type":16,"tag":36,"props":64,"children":67},{"href":65,"rel":66},"https://tfhe.github.io/tfhe/",[40],[68],{"type":21,"value":69},"tools",{"type":21,"value":54},{"type":16,"tag":36,"props":72,"children":75},{"href":73,"rel":74},"https://github.com/shaih/HElib",[40],[76],{"type":21,"value":77},"have",{"type":21,"value":54},{"type":16,"tag":36,"props":80,"children":83},{"href":81,"rel":82},"https://github.com/vernamlab/cuFHE",[40],[84],{"type":21,"value":85},"been",{"type":21,"value":54},{"type":16,"tag":36,"props":88,"children":91},{"href":89,"rel":90},"https://github.com/CryptoExperts/FV-NFLlib",[40],[92],{"type":21,"value":93},"released",{"type":21,"value":95},", and papers have been published showing how practical HE has become in the case of ",{"type":16,"tag":36,"props":97,"children":100},{"href":98,"rel":99},"https://eprint.iacr.org/2018/074.pdf",[40],[101],{"type":21,"value":102},"logistic regression",{"type":21,"value":104},", as well as ",{"type":16,"tag":36,"props":106,"children":109},{"href":107,"rel":108},"http://proceedings.mlr.press/v48/gilad-bachrach16.pdf",[40],[110],{"type":21,"value":111},"deep learning",{"type":21,"value":113},". We also hope to see tools that lower the barrier of applying homomorphic encryption in deep learning. But let's first take a look at what HE is.",{"type":16,"tag":24,"props":115,"children":117},{"id":116},"black-box-view",[118],{"type":21,"value":119},"Black Box View",{"type":16,"tag":17,"props":121,"children":122},{},[123,125,132,134,140],{"type":21,"value":124},"Say we have a function F that performs a certain computation on two elements x and y and outputs a result z : ",{"type":16,"tag":126,"props":127,"children":129},"code",{"className":128},[],[130],{"type":21,"value":131},"z = F(x, y)",{"type":21,"value":133},", an HE scheme lets you perform a certain function (we use the same F in our case) on encrypted elements ",{"type":16,"tag":126,"props":135,"children":137},{"className":136},[],[138],{"type":21,"value":139},"he_encrypt(F(x, y)) = F(he_encrypt(x), he_encrypt(y))",{"type":21,"value":141},". That function F is generally an addition or a multiplication, having a scheme that supports arbitrary function F is a dream at the time of writing this post (but who knows?), which resulted in some challenges we will discuss later on.",{"type":16,"tag":17,"props":143,"children":144},{},[145],{"type":16,"tag":146,"props":147,"children":150},"img",{"alt":148,"src":149},"he black box","/img/he-black-box.png",[],{"type":16,"tag":17,"props":152,"children":153},{},[154],{"type":21,"value":155},"So, what do we get from all this? Well, let's say that you want to perform some computation in the cloud using some data, but still want to preserve its privacy, using HE you can send the encrypted version of your data to the cloud, perform the computation there and get back the encrypted result that you can decrypt later on. All these steps don't require the client to stay connected (to provide additional help during the computation) and that's one benefit of HE.",{"type":16,"tag":24,"props":157,"children":159},{"id":158},"more-details",[160],{"type":21,"value":161},"More Details",{"type":16,"tag":17,"props":163,"children":164},{},[165],{"type":21,"value":166},"Like any encryption, HE schemes use a public key to encrypt plaintexts into ciphertexts, and a secret or private key to decrypt ciphertexts into plaintexts, optionally, they may use an evaluation key to perform operations (addition/multiplication) on ciphertexts.",{"type":16,"tag":17,"props":168,"children":169},{},[170],{"type":16,"tag":146,"props":171,"children":174},{"alt":172,"src":173},"he process","/img/he-process.png",[],{"type":16,"tag":17,"props":176,"children":177},{},[178],{"type":21,"value":179},"HE schemes (here I'm talking about the ones that are based on lattices and the RLWE problem) operate in similar manners where they hide the plaintext by adding a secret part that can be taken off using only the secret key plus a noise that doesn't affect decryption, however, some issues arise when this noise gets multiplied or added with other noises while performing evaluations on ciphertexts, we will not go into the details here but you should keep in mind this when you choose parameters for your schemes and how to make sure the noise doesn't completely blind your plaintext.",{"type":16,"tag":17,"props":181,"children":182},{},[183,185,192,194,201],{"type":21,"value":184},"I will dedicate a blog post to talk more about ",{"type":16,"tag":36,"props":186,"children":189},{"href":187,"rel":188},"https://eprint.iacr.org/2016/421.pdf",[40],[190],{"type":21,"value":191},"the CKKS scheme",{"type":21,"value":193}," and how it can be used in practice using the ",{"type":16,"tag":36,"props":195,"children":198},{"href":196,"rel":197},"https://github.com/Microsoft/SEAL",[40],[199],{"type":21,"value":200},"Microsoft SEAL library",{"type":21,"value":202},".",{"type":16,"tag":24,"props":204,"children":206},{"id":205},"types-of-he",[207],{"type":21,"value":208},"Types of HE",{"type":16,"tag":17,"props":210,"children":211},{},[212],{"type":21,"value":213},"Depending on the possible functions F you can compute and how many operations can be chained on a ciphertext, HE schemes can be classified into 3 main types:",{"type":16,"tag":215,"props":216,"children":217},"ul",{},[218,230,240],{"type":16,"tag":219,"props":220,"children":221},"li",{},[222,228],{"type":16,"tag":223,"props":224,"children":225},"strong",{},[226],{"type":21,"value":227},"Fully-HE (FHE)",{"type":21,"value":229},": That's the most useful type to be used for deep learning currently, it allows any number of addition and multiplication operations.",{"type":16,"tag":219,"props":231,"children":232},{},[233,238],{"type":16,"tag":223,"props":234,"children":235},{},[236],{"type":21,"value":237},"Somewhat-HE (SHE)",{"type":21,"value":239},": It allows both addition and multiplication, but we are limited in term of the number of operations we can perform.",{"type":16,"tag":219,"props":241,"children":242},{},[243,248],{"type":16,"tag":223,"props":244,"children":245},{},[246],{"type":21,"value":247},"Partially-HE (PHE)",{"type":21,"value":249},": This type of scheme either allows addition or multiplication, but in an unlimited fashion.",{"type":16,"tag":17,"props":251,"children":252},{},[253,255,261],{"type":21,"value":254},"I have dedicated a blog post that you can find ",{"type":16,"tag":36,"props":256,"children":258},{"href":257},"/blog/homomorphic-encryption-types/",[259],{"type":21,"value":260},"here",{"type":21,"value":262}," that details more about each type.",{"type":16,"tag":24,"props":264,"children":266},{"id":265},"about-the-security-of-he-schemes",[267],{"type":21,"value":268},"About the Security of HE Schemes",{"type":16,"tag":17,"props":270,"children":271},{},[272,274,281,283,289],{"type":21,"value":273},"If you are concerned with the security of HE schemes, and how broken they can be in the near future, then you should know that most current schemes use ",{"type":16,"tag":36,"props":275,"children":278},{"href":276,"rel":277},"https://en.wikipedia.org/wiki/Lattice-based_cryptography",[40],[279],{"type":21,"value":280},"lattice-based cryptography",{"type":21,"value":282}," which is post-quantum secure. If those words doesn't make sense to you then just keep in mind that there is no algorithm that can break the security of this kind of schemes in polynomial time both in classical and quantum computers, actually, the best known attack runs in exponential time. For more details on how to set parameters to achieve a certain security level, please refer to the Homomorphic Encryption Standard listed in the ",{"type":16,"tag":36,"props":284,"children":286},{"href":285},"#additional-resources",[287],{"type":21,"value":288},"Additional Resources section",{"type":21,"value":202},{"type":16,"tag":24,"props":291,"children":293},{"id":292},"challenges-of-applying-he-for-deep-learning",[294],{"type":21,"value":295},"Challenges of Applying HE for Deep Learning",{"type":16,"tag":17,"props":297,"children":298},{},[299,301,308,310,316],{"type":21,"value":300},"Most of deep neural networks operations are tensor multiplication and nonlinear activation functions, the former is natively supported by HE schemes, but the latter is not, functions like ",{"type":16,"tag":36,"props":302,"children":305},{"href":303,"rel":304},"https://en.wikipedia.org/wiki/Sigmoid_function",[40],[306],{"type":21,"value":307},"sigmoid",{"type":21,"value":309}," can't be simply applied on encrypted data, however, they can be approximated using a linear function, we can use low degree polynomials to do that, of course there is a tradeoff between precision and performance, you get better precision when you choose a higher degree polynomial but you will also need to do more computation which is something you should care about when doing HE, in general, you should choose the lowest degree polynomial that has a good precision on a range ",{"type":16,"tag":311,"props":312,"children":313},"span",{},[314],{"type":21,"value":315},"a, b",{"type":21,"value":317}," that most of your data fall into.",{"type":16,"tag":17,"props":319,"children":320},{},[321,323,330,332,339],{"type":21,"value":322},"Deep neural networks also involve a long chain of multiplications which is hard to do with practical schemes (which are basically SHE), we can't apply many multiplications to ciphertexts and still be able to decrypt to the correct value, possible solutions would be to send back ciphertexts to the data owner at some point to be decrypted, re-encrypted and sent back so further multiplications can be done, this requires an active connection with the client which isn't always possible. We can also either adapt the parameters of our scheme to make a certain multiplicative depth possible or use ",{"type":16,"tag":36,"props":324,"children":327},{"href":325,"rel":326},"https://crypto.stackexchange.com/questions/42666/what-exactly-is-bootstrapping-in-fhe",[40],[328],{"type":21,"value":329},"bootstrapping",{"type":21,"value":331},", which can allow any multiplicative depth and thus transforming SHE schemes into FHE, however, bootstrapping operations are costly but ",{"type":16,"tag":36,"props":333,"children":336},{"href":334,"rel":335},"https://eprint.iacr.org/2018/1043.pdf",[40],[337],{"type":21,"value":338},"some work",{"type":21,"value":340},"s are trying to make it more practical.",{"type":16,"tag":17,"props":342,"children":343},{},[344,346,351],{"type":21,"value":345},"A single ciphertext in ",{"type":16,"tag":36,"props":347,"children":349},{"href":187,"rel":348},[40],[350],{"type":21,"value":191},{"type":21,"value":352}," (and many others) can hold more than a simple number, so someone can increase efficiency by batching a vector into a single ciphertext thus multiplying all the value in the vector with a single instruction (SIMD: Single Instruction Multiple Data), this will also reduce both memory consumption (doesn't require to hold N ciphertexts) and communication costs (as we send and get back ciphertexts to the cloud), however, batching introduces complexity in how to handle operations, for instance, if we put a whole vector into a ciphertext then how should we do dot product operations? Designing a good structure for tensors here is key to make HE practical in deep learning.",{"type":16,"tag":24,"props":354,"children":356},{"id":355},"conclusion",[357],{"type":21,"value":358},"Conclusion",{"type":16,"tag":17,"props":360,"children":361},{},[362],{"type":21,"value":363},"Only a decade after introducing the first FHE scheme and we have seen practical application of it, of course, there is still room for improvements and for things to become standardized and production-ready, but let's hope for the best and build solutions that make privacy a trivial thing.",{"type":16,"tag":24,"props":365,"children":367},{"id":366},"additional-resources",[368],{"type":21,"value":369},"Additional Resources",{"type":16,"tag":215,"props":371,"children":372},{},[373,383,393],{"type":16,"tag":219,"props":374,"children":375},{},[376],{"type":16,"tag":36,"props":377,"children":380},{"href":378,"rel":379},"https://blog.n1analytics.com/homomorphic-encryption-illustrated-primer/",[40],[381],{"type":21,"value":382},"A Homomorphic Encryption Illustrated Primer",{"type":16,"tag":219,"props":384,"children":385},{},[386],{"type":16,"tag":36,"props":387,"children":390},{"href":388,"rel":389},"http://homomorphicencryption.org/wp-content/uploads/2018/11/HomomorphicEncryptionStandardv1.1.pdf",[40],[391],{"type":21,"value":392},"Homomorphic Encryption Standard",{"type":16,"tag":219,"props":394,"children":395},{},[396],{"type":16,"tag":36,"props":397,"children":400},{"href":398,"rel":399},"https://www.microsoft.com/en-us/research/event/private-ai-bootcamp/",[40],[401],{"type":21,"value":402},"Microsoft Private AI Bootcamp, Dec 2019",{"title":7,"searchDepth":404,"depth":404,"links":405},2,[406,407,408,409,410,411,412,413],{"id":26,"depth":404,"text":29},{"id":116,"depth":404,"text":119},{"id":158,"depth":404,"text":161},{"id":205,"depth":404,"text":208},{"id":265,"depth":404,"text":268},{"id":292,"depth":404,"text":295},{"id":355,"depth":404,"text":358},{"id":366,"depth":404,"text":369},"markdown","content:blog:introduction-to-homomorphic-encryption.md","content","blog/introduction-to-homomorphic-encryption.md","md",1744826259221]